-- local status, saga = pcall(require, "lspsaga")
-- if (not status) then
--   print("lspaga is not installed")
--   return
-- end
--
-- saga.setup({
--   -- ui = {
--   --   winblend = 10,
--   --   border = 'rounded',
--   --   colors = {
--   --     normal_bg = '#002b36'
--   --   }
--   -- },
--   debug = false,
--   use_saga_diagnostic_sign = true,
--   -- code action title icon
--   code_action_prompt = {
--     enable = true,
--     sign = true,
--     sign_priority = 40,
--     virtual_text = true,
--   },
--   finder_definition_icon = "  ",
--   finder_reference_icon = "  ",
--   max_preview_lines = 10,
--   finder_action_keys = {
--     open = "o",
--     vsplit = "s",
--     split = "i",
--     quit = "q",
--     scroll_down = "<C-f>",
--     scroll_up = "<C-b>",
--   },
--   code_action_keys = {
--     quit = "q",
--     exec = "<CR>",
--   },
--   rename_action_keys = { quit = "<C-c>", exec = "<CR>",
--   },
--   border_style = "single",
--   -- rename_prompt_prefix = "➤",
--   rename_output_qflist = {
--     enable = false,
--     auto_open_qflist = false,
--   },
--   server_filetype_map = {},
--   -- diagnostic_prefix_format = "%d. ",
--   -- diagnostic_message_format = "%m %c",
--   highlight_prefix = false,
-- })
--
-- -- local diagnostic = require("lspsaga.diagnostic")
-- local opts = { noremap = true, silent = true }
-- -- vim.keymap.set('n', '<C-j>', '<Cmd>Lspsaga diagnostic_jump_next<CR>', opts)
-- -- vim.keymap.set('n', 'gl', '<Cmd>Lspsaga show_diagnostic<CR>', opts)
-- -- vim.keymap.set('n', 'K', '<Cmd>Lspsaga hover_doc<CR>', opts)
-- vim.keymap.set('n', 'gd', '<Cmd>Lspsaga lsp_finder<cr>', opts)
-- -- -- vim.keymap.set('i', '<C-k>', '<Cmd>Lspsaga signature_help<CR>', opts)
-- vim.keymap.set('i', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
-- -- vim.keymap.set('n', 'gp', '<Cmd>Lspsaga peek_definition<CR>', opts)
-- -- vim.keymap.set('n', 'gr', '<Cmd>Lspsaga rename<CR>', opts)
-- --
-- -- -- code action
-- -- local codeaction = require("lspsaga.codeaction")
-- -- vim.keymap.set("n", "<leader>ca", function() codeaction:code_action() end, { silent = true })
-- -- vim.keymap.set("v", "<leader>ca", function()
-- --   vim.fn.feedkeys(vim.api.nvim_replace_termcodes("<C-U>", true, false, true))
-- --   codeaction:range_code_action()
-- -- end, { silent = true })
-- --
-- local map = vim.api.nvim_buf_set_keymap
-- map(0, "n", "gr", "<cmd>Lspsaga rename<cr>", { silent = true, noremap = true })
-- map(0, "n", "gx", "<cmd>Lspsaga code_action<cr>", { silent = true, noremap = true })
-- map(0, "x", "gx", ":<c-u>Lspsaga range_code_action<cr>", { silent = true, noremap = true })
-- map(0, "n", "K", "<cmd>Lspsaga hover_doc<cr>", { silent = true, noremap = true })
-- map(0, "n", "go", "<cmd>Lspsaga show_line_diagnostics<cr>", { silent = true, noremap = true })
-- map(0, "n", "gj", "<cmd>Lspsaga diagnostic_jump_next<cr>", { silent = true, noremap = true })
-- map(0, "n", "gk", "<cmd>Lspsaga diagnostic_jump_prev<cr>", { silent = true, noremap = true })
-- map(0, "n", "<C-u>", "<cmd>lua require('lspsaga.action').smart_scroll_with_saga(-1, '<c-u>')<cr>", {})
-- map(0, "n", "<C-d>", "<cmd>lua require('lspsaga.action').smart_scroll_with_saga(1, '<c-d>')<cr>", {})
